#!/bin/bash

# sessiond - standalone X session manager
# Copyright (C) 2018 James Reed
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

set -eu

readonly target=sessiond-session.target

is_active() {
    systemctl --user is-active "$1"
}

consists_of() {
    systemctl --user show -p ConsistsOf --value "$1"
}

session_call() {
    method="$1"
    shift
    gdbus call --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1 \
        --method org.sessiond.session1.Session."$method" "$@"
}

backlight_call() {
    name="$1"
    shift
    method="$1"
    shift
    gdbus call --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1/backlight/"$name" \
        --method org.sessiond.session1.Backlight."$method" -- "$@"
}

print_properties() {
    perl -e '
    while (my $line = <STDIN>) {
        if ($line =~ /.*\s(.*)\s=\s(.*);/) {
            my $v = $2;
            if (substr($v, 0, 1) eq "[" and substr($v, -1) eq "]") {
                $v =~ s/,//;
                $v =~ tr/[]/()/;
            }
            print "$1=$v\n";
        }
    }'
}

get_property() {
    print_properties | grep "^$1"
}

get_property_val() {
    get_property "$1" | cut -d= -f2
}

session_properties() {
    gdbus introspect --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1 \
        --only-properties
}

backlight_properties() {
    gdbus introspect --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1/backlight/"$1" \
        --only-properties
}

list_backlights() {
    declare -a Backlights
    eval "$(session_properties | get_property Backlight)"

    for i in "${Backlights[@]}"; do
        echo "${i##*/}"
    done
}

check_backlight() {
    if ! list_backlights | grep -q "$1"; then
        echo "backlight $1 not found" >&2
        exit 2
    fi
}

backlight_get() {
    if [ $# -eq 0 ]; then
        echo 'usage: sessionctl backlight get BACKLIGHT' >&2
        exit 2
    fi
    check_backlight "$1"
    backlight_properties "$1" | get_property_val Brightness
}

backlight_set() {
    if [ $# -eq 0 ]; then
        echo 'usage: sessionctl backlight set BACKLIGHT VALUE' >&2
        exit 2
    fi
    check_backlight "$1"
    backlight_call "$1" SetBrightness "$2" > /dev/null
}

backlight_inc() {
    if [ $# -eq 0 ]; then
        echo 'usage: sessionctl backlight inc BACKLIGHT VALUE' >&2
        exit 2
    fi
    check_backlight "$1"
    r="$(backlight_call "$1" IncBrightness "$2")"
    expr "$r" : "(.* \(.*\),)"
}

status() {
    active="$(is_active $target)"
    r=$?

    if [ $r -ne 0 ]; then
        echo "$target: $active"
        exit $r
    fi

    units="$(consists_of graphical-session.target)"

    if [ -n "$units" ]; then
        i=0
        pad=${#target}
        for unit in $units; do
            i=$((i + 1))
            [ ${#unit} -gt $pad ] && pad=${#unit}
        done
        # account for colon
        pad=$((pad + 1))
        # account for bars
        printf "%-$((pad + 2))s %s\n" "$target:" "$active"
        for unit in $units; do
            i=$((i - 1))
            [ $i -eq 0 ] && s='└' || s='├'
            printf "$s─%-${pad}s %s\n" "$unit:" "$(is_active "$unit")"
        done
    fi

    exit
}

usage() {
    echo 'usage: sessionctl [command]

With no command, show session status.

commands:
  run         Run session
  stop        Stop the running session
  status      Show session status
  lock        Lock the session
  unlock      Unlock the session
  properties  List session properties
  backlight   Interact with backlights
                Subcommands: list, get, set, inc
  version     Show sessiond version'
}

[ $# -eq 0 ] && status

case "$1" in
    run)
        if systemctl --user -q is-active $target; then
            echo 'A session is already running' >&2
            exit 1
        fi
        systemctl --user import-environment
        exec systemctl --user --wait start $target
        ;;
    stop) systemctl --user stop $target ;;
    status) status ;;
    lock) session_call Lock > /dev/null ;;
    unlock) session_call Unlock > /dev/null ;;
    properties) session_properties | print_properties ;;
    backlight)
        shift
        if [ $# -eq 0 ]; then
            list_backlights
            exit
        fi
        case "$1" in
            get) shift; backlight_get "$@" ;;
            set) shift; backlight_set "$@" ;;
            inc) shift; backlight_inc "$@" ;;
            list) list_backlights ;;
            *)
                echo 'usage: sessionctl backlight [command]

commands:
  list                 List backlights
  get BACKLIGHT        Get backlight brightness
  set BACKLIGHT VALUE  Set backlight brightness
  inc BACKLIGHT VALUE  Increment backlight brightness' >&2; exit 2
        esac
        ;;
    version) session_properties | get_property_val Version | tr -d "'" ;;
    *) usage >&2; exit 2
esac
