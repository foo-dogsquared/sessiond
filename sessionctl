#!/bin/sh

# sessiond - standalone X session manager
# Copyright (C) 2018 James Reed
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

set -eu

readonly target=sessiond-session.target

is_active() {
    systemctl --user is-active "$1"
}

consists_of() {
    systemctl --user show -p ConsistsOf --value "$1"
}

session_call() {
    method="$1"
    shift
    gdbus call --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1 \
        --method org.sessiond.session1.Session."$method" "$@"
}

session_properties() {
    gdbus introspect --session \
        --dest org.sessiond.session1 \
        --object-path /org/sessiond/session1 \
        --only-properties \
        | awk '/.*=.*;/ {gsub(";",""); print $3"="$5}'
}

status() {
    active="$(is_active $target)"
    r=$?

    if [ $r -ne 0 ]; then
        echo "$target: $active"
        exit $r
    fi

    units="$(consists_of graphical-session.target)"

    if [ -n "$units" ]; then
        i=0
        pad=${#target}
        for unit in $units; do
            i=$((i + 1))
            [ ${#unit} -gt $pad ] && pad=${#unit}
        done
        # account for colon
        pad=$((pad + 1))
        # account for bars
        printf "%-$((pad + 2))s %s\n" "$target:" "$active"
        for unit in $units; do
            i=$((i - 1))
            [ $i -eq 0 ] && s='└' || s='├'
            printf "$s─%-${pad}s %s\n" "$unit:" "$(is_active "$unit")"
        done
    fi

    exit
}

usage() {
    echo 'usage: sessionctl [command]

With no command, show session status.

commands:
  run         Run session
  stop        Stop the running session
  status      Show session status
  lock        Lock the session
  unlock      Unlock the session
  properties  List sessiond properties
  version     Show sessiond version'
}

[ $# -eq 0 ] && status

case "$1" in
    run)
        if systemctl --user -q is-active $target; then
            echo 'A session is already running' >&2
            exit 1
        fi
        systemctl --user import-environment
        exec systemctl --user --wait start $target
        ;;
    stop) systemctl --user stop $target ;;
    status) status ;;
    lock) session_call Lock > /dev/null ;;
    unlock) session_call Unlock > /dev/null ;;
    properties) session_properties ;;
    version) expr "$(session_call GetVersion)" : "('\(.*\)'" ;;
    *) usage >&2; exit 2
esac
