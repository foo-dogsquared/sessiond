#!/usr/bin/python3

# sessiond - standalone X session manager
# Copyright (C) 2020 James Reed
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

import sys
from argparse import ArgumentParser
from os import execlp
from pathlib import PurePath
from subprocess import run

from dbus.exceptions import DBusException
from sessiond import Session, Backlight


class Unit:
    def __init__(self, name='sessiond-session.target'):
        self.name = name

    def active(self):
        cmd = 'systemctl --user -q is-active {}'.format(self.name)
        return run(cmd.split()).returncode == 0

    def status(self):
        cmd = 'systemctl --user is-active {}'.format(self.name)
        return run(cmd.split(), capture_output=True, text=True).stdout.rstrip()

    def consists_of(self):
        cmd = 'systemctl --user show -p ConsistsOf --value {}'.format(self.name)
        return run(cmd.split(), capture_output=True, text=True,
                   check=True).stdout.split()

    def stop(self):
        run('systemctl --user stop {}'.format(self.name).split(), check=True)

    def exec_start_wait(self):
        execlp('systemctl', 'systemctl', '--user', '--wait', 'start', self.name)


def status():
    g = Unit('graphical-session.target')
    if not g.active():
        sys.stderr.write('Session is not active\n')
        sys.exit(1)
    units = g.consists_of()
    n = len(max(units, key=len))
    for u in units:
        print('{u: <{n}} {s}'.format(u=u + ':', n=n + 1, s=Unit(u).status()))


def get_session():
    try:
        return Session()
    except DBusException as e:
        sys.stderr.write('Failed to connect to sessiond DBus service: {}\n'\
                         .format(e.get_dbus_message()))
        sys.exit(1)


if __name__ == '__main__':
    p = ArgumentParser(description='With no arguments, show session status.')
    subp = p.add_subparsers(dest='cmd')

    subp.add_parser('run', help='Run session')
    subp.add_parser('stop', help='Stop the running session')
    subp.add_parser('status', help='Show session status')
    subp.add_parser('lock', help='Lock the session')
    subp.add_parser('unlock', help='Unlock the session')
    subp.add_parser('properties', help='List session properties')

    def str_or_int(s):
        try:
            return int(s)
        except ValueError:
            return s

    b = subp.add_parser('backlight', help='Interact with backlights')
    b.add_argument('-l', '--list', action='store_true',
                   help='List backlight names')
    b.add_argument('-g', '--get', metavar='BACKLIGHT',
                   help='Get backlight brightness')
    b.add_argument('-s', '--set', type=str_or_int, nargs=2,
                   metavar=('BACKLIGHT', 'VALUE'),
                   help='Set backlight brightness')
    b.add_argument('-i', '--inc', type=str_or_int, nargs=2,
                   metavar=('BACKLIGHT', 'VALUE'),
                   help='Increment backlight brightness')

    subp.add_parser('version', help='Show sessiond version')

    args = p.parse_args()

    if not args.cmd:
        status()
        sys.exit(0)

    sessiond_session = Unit()

    if args.cmd == 'run':
        if sessiond_session.active():
            sys.stderr.write('A session is already running\n')
            sys.exit(1)
        run('systemctl --user import-environment'.split(), check=True)
        sessiond_session.exec_start_wait()
    elif args.cmd == 'stop':
        sessiond_session.stop()
    elif args.cmd == 'status':
        status()
    elif args.cmd == 'lock':
        get_session().lock()
    elif args.cmd == 'unlock':
        get_session().unlock()
    elif args.cmd == 'properties':
        for k, v in get_session().get_properties().items():
            print('{}={}'.format(k, v))
    elif args.cmd == 'backlight':
        if args.get:
            print(Backlight(args.get))
        elif args.set:
            Backlight(args.set[0]).set_brightness(args.set[1])
        elif args.inc:
            Backlight(args.inc[0]).inc_brightness(args.inc[1])
        else:
            bls = get_session().backlights
            if len(bls) == 0:
                sys.stderr.write('No backlights\n')
                sys.exit(1)
            for o in bls:
                print(PurePath(o).name)
    elif args.cmd == 'version':
        print(get_session().version)
